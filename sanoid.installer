#!/bin/bash

# Install and enable epel if we don't already have it, and git too
yum install -y epel-release git
# Install the packages that Sanoid depends on:
yum install -y perl-Config-IniFiles perl-Data-Dumper perl-Capture-Tiny lzop mbuffer mhash pv
# Install CPAN
yum install -y perl-CPAN perl-CPAN
# Installing samba server
yum -y install samba samba-client
# enable samba service
systemctl enable smb nmb
# starting samba
systemctl start smb nmb
# Download the repo as root to avoid changing permissions later
git clone https://github.com/jimsalterjrs/sanoid.git
cd sanoid
# checkout latest stable release or stay on master for bleeding edge stuff (but expect bugs!)
git checkout $(git tag | grep "^v" | tail -n 1)
# Install the executables
cp sanoid syncoid findoid sleepymutex /usr/local/sbin
# Create the config directory
mkdir /etc/sanoid
# Install default config
cp sanoid.defaults.conf /etc/sanoid
# Create a blank config file
touch /etc/sanoid/sanoid.conf
# Place the sample config in the conf directory for reference
POOL=$(zfs list -o name | grep -v NAME | awk -F " " {'print $1'})
echo "[$POOL]" > /etc/sanoid/sanoid.conf
cat << "EOF" | tee -a /etc/sanoid/sanoid.conf
	use_template = production
	hourly = 12
	monthly = 1

[template_production]
        frequently = 20
        hourly = 12
        daily = 30
        monthly = 3
        yearly = 0
        autosnap = yes
        autoprune = yes
EOF


cat << "EOF" | tee /etc/systemd/system/sanoid.service
[Unit]
Description=Snapshot ZFS Pool
Requires=zfs.target
After=zfs.target
Wants=sanoid-prune.service
Before=sanoid-prune.service
ConditionFileNotEmpty=/etc/sanoid/sanoid.conf

[Service]
Environment=TZ=UTC
Type=oneshot
ExecStart=/bin/bash /root/umount.snap
ExecStart=/usr/local/sbin/sanoid --prune-snapshots --verbose
ExecStart=/usr/local/sbin/sanoid --take-snapshots --verbose
ExecStart=/bin/bash /root/mount.snap
EOF

cat << "EOF" | tee /etc/systemd/system/sanoid-prune.service
[Unit]
Description=Cleanup ZFS Pool
Requires=zfs.target
After=zfs.target sanoid.service
ConditionFileNotEmpty=/etc/sanoid/sanoid.conf

[Service]
Environment=TZ=UTC
Type=oneshot
ExecStart=/usr/local/sbin/sanoid --prune-snapshots --verbose

[Install]
WantedBy=sanoid.service
EOF

cat << "EOF" | tee /etc/systemd/system/sanoid.timer
[Unit]
Description=Run Sanoid Every 15 Minutes
Requires=sanoid.service

[Timer]
OnCalendar=*:0/15
Persistent=true

[Install]
WantedBy=timers.target
EOF

cat << "EOF" | tee /root/umount.snap
#!/bin/bash
  systemctl stop smb nmb
  for variable in $(zfs list -t snapshot | grep -v NAME | awk -F " " {'print $1'});do
    arrVar+=("$variable")
  done
  for snaps in ${arrVar[@]};do
    name=$(echo $snaps | sed "s/://g")
    umount -f /snaps/$name
  done
  rm -rf /snaps/*
  sleep 5
EOF

cat << "EOF" | tee /root/mount.snap
#!/bin/bash
  #SAMBA_FILE="/etc/samba/smb.conf"
  mkdir -p /etc/samba/samba.d
  SAMBA_FILE2="/etc/samba/samba.d/include.conf"
  for variable in $(zfs list -t snapshot | grep -v NAME | awk -F " " {'print $1'});do
    arrVar+=("$variable")
  done
  for snapsDir in ${arrVar[@]};do
    name=$(echo $snapsDir | sed "s/://g")
    mkdir -p /snaps/$name
  done
  for snaps in ${arrVar[@]};do
    name=$(echo $snaps | sed "s/://g")
    mount -t zfs $snaps /snaps/$name
  done
  #echo "[global]" > $SAMBA_FILE
  #echo "include = /etc/samba/samba.d/include.conf" >> $SAMBA_FILE
  #echo "workgroup = WORKGROUP" >> $SAMBA_FILE
  #echo "security = user" >> $SAMBA_FILE
  #echo "passdb backend = tdbsam" >> $SAMBA_FILE
  #echo "printing = cups" >> $SAMBA_FILE
  #echo "printcap name = cups" >> $SAMBA_FILE
  #echo "load printers = no" >> $SAMBA_FILE
  #echo "cups options = raw" >> $SAMBA_FILE
  echo " " > $SAMBA_FILE2
  for samba in ${arrVar[@]};do
    name=$(echo $samba | sed "s/://g")
    name2=$(echo $name | sed "s/\//_/g")
    echo "[$name2]" >> $SAMBA_FILE2
    echo "path = /snaps/$name" >> $SAMBA_FILE2
    echo "valid users = bmsuser     # allow only security group" >> $SAMBA_FILE2
    echo "writable = no" >> $SAMBA_FILE2
    echo "public = yes" >> $SAMBA_FILE2
    echo "browseable = yes" >> $SAMBA_FILE2
  done
  systemctl restart smb nmb
EOF

# Tell systemd about our new service definitions
systemctl daemon-reload
# Enable sanoid-prune.service to allow it to be triggered by sanoid.service
systemctl enable sanoid-prune.service
# Enable and start the Sanoid timer
systemctl enable sanoid.timer
systemctl enable sanoid.service
systemctl start sanoid.timer
systemctl start sanoid.service
